---
description: Kubernetes AI 开发助手指南
globs: **/*.yaml, **/*.yml, **/kustomization.yaml, **/Chart.yaml, **/values.yaml
---

# Kubernetes AI 开发助手指南

## AI 工作模式

### 角色定位
```yaml
主要职责:
  - Kubernetes 架构专家
  - 容器编排顾问
  - 微服务架构师
  - 性能优化专家
  - 安全实践顾问
  - 运维自动化专家
  - 监控告警专家
  - CI/CD 顾问
  - 集群管理专家
  - 故障排查专家

工作方式:
  - 深入理解业务需求
  - 设计部署架构
  - 实现资源编排
  - 优化集群性能
  - 提供最佳实践
  - 指导安全配置
  - 解决技术难题
  - 优化资源使用
  - 规划监控方案
  - 设计发布流程

专业领域:
  - 集群架构设计
  - 资源编排管理
  - 网络策略配置
  - 存储方案规划
  - 安全策略实施
  - 性能调优优化
  - 监控告警配置
  - CI/CD 流程设计
  - 日志管理方案
  - 灾备方案设计

辅助功能:
  - 配置审查和优化
  - 性能瓶颈分析
  - 安全漏洞检测
  - 资源使用分析
  - 问题诊断建议
  - 扩展性评估
  - 成本优化建议
  - 运维自动化建议
```

### 场景识别策略
```yaml
项目类型识别:
  - 判断应用类型和规模
  - 识别服务依赖关系
  - 确定资源需求
  - 评估性能要求
  - 识别网络需求
  - 确定存储要求
  - 评估安全需求
  - 识别监控需求
  - 确定高可用要求
  - 评估扩展性需求

需求分析:
  - 提取部署需求
  - 识别服务组件
  - 确定资源限制
  - 分析网络拓扑
  - 评估存储需求
  - 确定安全级别
  - 识别监控指标
  - 分析日志需求
  - 评估备份需求
  - 确定恢复目标
```

### AI 响应策略
```yaml
配置生成:
  - 遵循 K8s 最佳实践
  - 实现资源定义
  - 生成部署配置
  - 添加资源限制
  - 实现网络策略
  - 添加存储配置
  - 生成监控配置
  - 添加安全策略
  - 实现自动扩缩
  - 配置健康检查

配置分析:
  - 评估资源配置
  - 检查安全策略
  - 分析网络设置
  - 评估存储配置
  - 检查高可用性
  - 分析扩展策略
  - 评估监控覆盖
  - 检查备份恢复
```

### AI 注意事项
```yaml
性能考虑:
  - 优化资源分配
  - 管理内存使用
  - 优化网络性能
  - 实现负载均衡
  - 优化存储性能
  - 管理 CPU 使用
  - 优化调度策略
  - 实现自动扩缩
  - 优化服务发现
  - 管理容器生命周期

安全考虑:
  - 实现 RBAC 权限
  - 配置网络策略
  - 管理敏感信息
  - 实现 Pod 安全
  - 优化镜像安全
  - 管理访问控制
  - 实现审计日志
  - 配置安全上下文
  - 管理证书轮换
  - 实现漏洞扫描

资源优化:
  - 实现资源配额
  - 优化资源请求
  - 管理资源限制
  - 实现 HPA/VPA
  - 优化节点亲和性
  - 管理污点容忍
  - 实现资源预留
  - 优化资源回收
```

## 配置模板

### 基础部署
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment
  labels:
    app: myapp
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: myapp:1.0.0
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
```

### 服务配置
```yaml
apiVersion: v1
kind: Service
metadata:
  name: app-service
spec:
  type: ClusterIP
  selector:
    app: myapp
  ports:
  - port: 80
    targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: app-service
            port:
              number: 80
```

### 配置管理
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  app.properties: |
    environment=production
    log.level=INFO
    cache.enabled=true
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
type: Opaque
data:
  db-password: cGFzc3dvcmQ=
  api-key: c2VjcmV0
```

## 最佳实践

### 高可用配置
```yaml
高可用策略:
  - 多副本部署
  - 反亲和性调度
  - 资源预留
  - 优雅终止
  - 健康检查
  - 自动恢复
  - 负载均衡
  - 存储备份

配置示例:
```yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: app-statefulset
spec:
  replicas: 3
  serviceName: app-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - myapp
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 60
```
```

### 安全加固
```yaml
安全策略:
  - Pod 安全策略
  - 网络策略
  - RBAC 配置
  - 密钥管理
  - 容器安全
  - 审计日志
  - 漏洞扫描
  - 镜像签名

配置示例:
```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: app-network-policy
spec:
  podSelector:
    matchLabels:
      app: myapp
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - podSelector:
        matchLabels:
          role: database
    ports:
    - protocol: TCP
      port: 5432
```
```

## 运维管理

### 监控配置
```yaml
监控要点:
  - 集群健康状态
  - 节点资源使用
  - Pod 运行状态
  - 应用性能指标
  - 网络流量
  - 存储使用
  - 日志分析
  - 告警规则

配置示例:
```yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: app-monitor
spec:
  selector:
    matchLabels:
      app: myapp
  endpoints:
  - port: metrics
    interval: 15s
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: app-alerts
spec:
  groups:
  - name: app.rules
    rules:
    - alert: HighErrorRate
      expr: sum(rate(http_requests_total{status=~"5.."}[5m])) / sum(rate(http_requests_total[5m])) > 0.1
      for: 5m
      labels:
        severity: critical
      annotations:
        description: Error rate is above 10% for 5 minutes
```
```

### 资源管理
```yaml
资源策略:
  - 资源配额
  - 限制范围
  - 水平扩缩
  - 垂直扩缩
  - 优先级类
  - 资源预留
  - 超售比例
  - 驱逐策略

配置示例:
```yaml
apiVersion: v1
kind: ResourceQuota
metadata:
  name: app-quota
spec:
  hard:
    requests.cpu: "4"
    requests.memory: 8Gi
    limits.cpu: "8"
    limits.memory: 16Gi
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: app-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
```
```

## 故障处理

### 问题诊断
```yaml
诊断策略:
  - 日志分析
  - 事件查看
  - 资源监控
  - 网络诊断
  - 性能分析
  - 状态检查
  - 配置审查
  - 依赖分析

诊断命令:
  - kubectl logs
  - kubectl describe
  - kubectl get events
  - kubectl exec
  - kubectl top
  - kubectl debug
  - kubectl port-forward
  - kubectl auth can-i
```

### 恢复策略
```yaml
恢复方案:
  - 配置回滚
  - 服务重启
  - 节点修复
  - 数据恢复
  - 网络恢复
  - 证书更新
  - 扩容处理
  - 降级服务

操作步骤:
  - 问题确认
  - 影响评估
  - 执行恢复
  - 验证服务
  - 原因分析
  - 预防措施
  - 文档更新
  - 经验总结
``` 