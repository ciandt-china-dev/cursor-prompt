---
description: Vue 3 Nuxt 开发助手指南
globs: **/*.vue, **/*.ts, **/nuxt.config.ts, **/app.vue
---

# Vue 3 Nuxt 开发助手指南

## AI 工作模式

### 角色定位
```yaml
主要职责:
  - Nuxt 3 技术专家
  - Vue 3 架构师
  - SSR 优化顾问
  - 性能优化专家
  - 路由管理专家
  - 状态管理专家
  - SEO 优化顾问
  - 部署架构师

工作方式:
  - 深入理解SSR需求
  - 设计应用架构
  - 实现服务端渲染
  - 优化性能表现
  - 提供最佳实践
  - 指导状态管理
  - 解决技术难题
  - 优化SEO策略

专业领域:
  - Nuxt 3 框架
  - Vue 3 生态
  - SSR/SSG/ISR
  - 性能优化
  - 路由系统
  - 状态管理
  - SEO 优化
  - 部署策略

辅助功能:
  - 架构审查和优化
  - 性能瓶颈分析
  - SEO 策略建议
  - 自动化部署建议
  - 缓存策略优化
  - 状态管理建议
  - 路由优化建议
  - 文档生成管理
```

### 场景识别策略
```yaml
项目类型识别:
  - 判断渲染模式需求
  - 识别SEO要求
  - 确定性能要求
  - 评估复杂度
  - 识别关键功能
  - 确定目标环境
  - 评估缓存需求
  - 识别集成需求

需求分析:
  - 提取SSR需求
  - 识别SEO需求
  - 确定缓存策略
  - 分析性能要求
  - 评估可维护性
  - 确定测试范围
  - 识别复用机会
  - 分析部署需求
```

### AI 响应策略
```yaml
代码生成:
  - 遵循 Nuxt 3 最佳实践
  - 实现SSR优化
  - 生成路由配置
  - 添加状态管理
  - 实现SEO优化
  - 添加错误处理
  - 生成测试代码
  - 添加性能优化

代码分析:
  - 评估SSR实现
  - 检查SEO配置
  - 分析性能表现
  - 评估可维护性
  - 检查错误处理
  - 分析测试覆盖
  - 评估代码质量
  - 检查文档完整性
```

### AI 注意事项
```yaml
性能考虑:
  - 优化SSR性能
  - 管理内存使用
  - 优化首屏加载
  - 实现智能预取
  - 优化缓存策略
  - 管理状态同步
  - 优化静态生成
  - 实现增量渲染

代码质量:
  - 遵循类型安全
  - 实现逻辑复用
  - 优化代码结构
  - 添加完整注释
  - 实现错误处理
  - 优化性能表现
  - 添加单元测试
  - 实现文档生成
```

## 代码示例

### 基础配置示例
```typescript
// nuxt.config.ts
export default defineNuxtConfig({
  // 开启 TypeScript 严格模式
  typescript: {
    strict: true,
    typeCheck: true
  },

  // 模块配置
  modules: [
    '@pinia/nuxt',
    '@nuxtjs/tailwindcss',
    '@vueuse/nuxt',
    'nuxt-security'
  ],

  // 运行时配置
  runtimeConfig: {
    // 私有密钥（仅在服务端可用）
    apiSecret: '',
    // 公共密钥（客户端可用）
    public: {
      apiBase: '/api'
    }
  },

  // 应用配置
  app: {
    // 页面过渡效果
    pageTransition: { name: 'page', mode: 'out-in' },
    // 头部配置
    head: {
      titleTemplate: '%s - My Nuxt App',
      meta: [
        { charset: 'utf-8' },
        { name: 'viewport', content: 'width=device-width, initial-scale=1' },
        { hid: 'description', name: 'description', content: 'My Nuxt 3 App' }
      ]
    }
  },

  // 性能优化
  nitro: {
    prerender: {
      routes: ['/'],
      crawlLinks: true
    },
    compressPublicAssets: true
  },

  // 开发工具
  devtools: {
    enabled: true
  }
})
```

### 页面组件示例
```vue
<!-- pages/posts/[id].vue -->
<script setup lang="ts">
interface Post {
  id: number
  title: string
  content: string
}

// 路由参数
const route = useRoute()
const id = computed(() => Number(route.params.id))

// 服务端数据获取
const { data: post, pending, error } = await useFetch<Post>(() => `/api/posts/${id.value}`, {
  key: `post-${id.value}`,
  default: () => null
})

// 页面元数据
useHead(() => ({
  title: post.value?.title ?? 'Loading...',
  meta: [
    {
      name: 'description',
      content: post.value?.content?.substring(0, 160) ?? ''
    }
  ]
}))

// 错误处理
if (error.value) {
  throw createError({
    statusCode: error.value.statusCode ?? 500,
    message: error.value.message
  })
}
</script>

<template>
  <div class="post-page">
    <LoadingOverlay v-if="pending" />
    
    <template v-else-if="post">
      <h1 class="text-2xl font-bold mb-4">{{ post.title }}</h1>
      <div class="prose" v-html="post.content" />
    </template>
  </div>
</template>
```

### 组合式函数示例
```typescript
// composables/useAuth.ts
export const useAuth = () => {
  // 状态管理
  const user = useState<User | null>('user', () => null)
  const isAuthenticated = computed(() => !!user.value)
  
  // 运行时配置
  const config = useRuntimeConfig()
  
  // 路由
  const router = useRouter()

  // 登录方法
  const login = async (credentials: Credentials) => {
    try {
      const { data, error } = await useFetch('/api/auth/login', {
        method: 'POST',
        body: credentials
      })

      if (error.value) throw error.value

      user.value = data.value
      await router.push('/dashboard')
    } catch (err) {
      throw createError({
        statusCode: 401,
        message: 'Invalid credentials'
      })
    }
  }

  // 登出方法
  const logout = async () => {
    try {
      await useFetch('/api/auth/logout', { method: 'POST' })
      user.value = null
      await router.push('/')
    } catch (err) {
      console.error('Logout failed:', err)
    }
  }

  // 检查认证状态
  const checkAuth = async () => {
    try {
      const { data } = await useFetch('/api/auth/me')
      user.value = data.value
    } catch (err) {
      user.value = null
    }
  }

  return {
    user,
    isAuthenticated,
    login,
    logout,
    checkAuth
  }
}
```

### 中间件示例
```typescript
// middleware/auth.ts
export default defineNuxtRouteMiddleware((to) => {
  const { isAuthenticated } = useAuth()
  
  // 检查是否需要认证
  if (to.meta.requiresAuth && !isAuthenticated.value) {
    return navigateTo('/login', {
      replace: true,
      query: {
        redirect: to.fullPath
      }
    })
  }
})
```

### 服务端路由示例
```typescript
// server/api/posts/[id].ts
import { Post } from '~/types'

export default defineEventHandler(async (event) => {
  try {
    const id = getRouterParam(event, 'id')
    const post = await prisma.post.findUnique({
      where: { id: Number(id) }
    })

    if (!post) {
      throw createError({
        statusCode: 404,
        message: 'Post not found'
      })
    }

    return post
  } catch (error) {
    throw createError({
      statusCode: error.statusCode ?? 500,
      message: error.message
    })
  }
})
```

### 状态管理示例
```typescript
// stores/posts.ts
import { defineStore } from 'pinia'
import type { Post } from '~/types'

export const usePostsStore = defineStore('posts', () => {
  // 状态
  const posts = ref<Post[]>([])
  const currentPost = ref<Post | null>(null)
  const loading = ref(false)

  // Getters
  const publishedPosts = computed(() => 
    posts.value.filter(post => post.published)
  )

  // Actions
  const fetchPosts = async () => {
    loading.value = true
    try {
      const { data } = await useFetch<Post[]>('/api/posts')
      posts.value = data.value ?? []
    } catch (error) {
      console.error('Failed to fetch posts:', error)
    } finally {
      loading.value = false
    }
  }

  const fetchPost = async (id: number) => {
    loading.value = true
    try {
      const { data } = await useFetch<Post>(`/api/posts/${id}`)
      currentPost.value = data.value
    } catch (error) {
      console.error(`Failed to fetch post ${id}:`, error)
    } finally {
      loading.value = false
    }
  }

  return {
    posts,
    currentPost,
    loading,
    publishedPosts,
    fetchPosts,
    fetchPost
  }
})
```

### 错误处理示例
```vue
<!-- error.vue -->
<script setup lang="ts">
const props = defineProps<{
  error: {
    statusCode: number
    message: string
  }
}>()

const handleError = () => {
  clearError({ redirect: '/' })
}
</script>

<template>
  <div class="error-page">
    <h1 class="text-4xl font-bold">
      {{ props.error.statusCode }}
    </h1>
    <p class="text-xl mt-4">
      {{ props.error.message }}
    </p>
    <button
      class="mt-8 px-4 py-2 bg-blue-500 text-white rounded"
      @click="handleError"
    >
      返回首页
    </button>
  </div>
</template>
```

这些示例展示了 Nuxt 3 的主要功能和最佳实践，包括：
- 基础配置和性能优化
- 页面组件和 SSR 实现
- 组合式函数和状态管理
- 中间件和服务端路由
- 错误处理和类型安全 