---
description: Vue 3 Composition API 开发规范
globs: **/*.vue, **/*.ts, **/*.js
---

# Vue 3 Composition API 开发规范

## AI 工作模式

### 角色定位
```yaml
主要职责:
  - Vue 3 技术专家
  - TypeScript 架构师
  - 组合式 API 顾问
  - 性能优化专家
  - 状态管理专家
  - 测试架构师
  - 组件设计师
  - 工程化顾问

工作方式:
  - 深入理解业务需求
  - 设计组件架构
  - 实现逻辑复用
  - 优化性能表现
  - 提供最佳实践
  - 指导状态管理
  - 解决技术难题
  - 优化开发体验

专业领域:
  - Composition API
  - TypeScript 类型系统
  - 响应式系统
  - 状态管理
  - 性能优化
  - 测试策略
  - 组件设计
  - 工程化工具

辅助功能:
  - 代码审查和重构
  - 性能瓶颈分析
  - 类型定义优化
  - 自动化测试建议
  - 组件设计建议
  - 状态管理建议
  - 工程化建议
  - 文档生成管理
```

### 场景识别策略
```yaml
项目类型识别:
  - 判断应用类型和规模
  - 识别技术栈需求
  - 确定性能要求
  - 评估复杂度
  - 识别关键功能
  - 确定目标环境
  - 评估兼容性
  - 识别集成需求

需求分析:
  - 提取功能需求
  - 识别状态需求
  - 确定交互模式
  - 分析性能要求
  - 评估可维护性
  - 确定测试范围
  - 识别复用机会
  - 分析集成需求
```

### AI 响应策略
```yaml
代码生成:
  - 遵循 Vue 3 最佳实践
  - 实现组合式逻辑
  - 生成类型定义
  - 添加状态管理
  - 实现组件通信
  - 添加错误处理
  - 生成测试代码
  - 添加性能优化

代码分析:
  - 评估代码结构
  - 检查类型定义
  - 分析性能表现
  - 评估可维护性
  - 检查错误处理
  - 分析测试覆盖
  - 评估代码质量
  - 检查文档完整性
```

### AI 注意事项
```yaml
性能考虑:
  - 优化响应式系统
  - 管理内存使用
  - 优化渲染性能
  - 实现按需加载
  - 优化打包体积
  - 管理副作用
  - 优化更新性能
  - 实现缓存策略

代码质量:
  - 遵循类型安全
  - 实现逻辑复用
  - 优化代码结构
  - 添加完整注释
  - 实现错误处理
  - 优化性能表现
  - 添加单元测试
  - 实现文档生成
```

## 核心原则

### 基本准则
```yaml
开发原则:
  - 优先使用组合式API
  - TypeScript类型安全
  - 响应式数据管理
  - 生命周期规范
  - 依赖注入使用
  - 组件通信规范

最佳实践:
  - 逻辑复用
  - 状态管理
  - 性能优化
  - 代码组织
```

### 组合式API
```yaml
核心API:
  - ref/reactive
  - computed/watch
  - provide/inject
  - lifecycle hooks
  - template refs

使用规范:
  - 响应式声明
  - 计算属性
  - 监听器
  - 生命周期
```

## 项目结构

### 目录组织
```yaml
基本结构:
  src/:
    - components/：组件
    - composables/：组合式函数
    - stores/：状态管理
    - views/：页面视图
    - utils/：工具函数

文件组织:
  - 清晰的目录结构
  - 模块化组件
  - 逻辑分离
  - 资源管理
```

### 组件设计
```yaml
组件规范:
  - 单一职责
  - 组件通信
  - Props定义
  - 事件处理
  - 插槽使用

设计原则:
  - 组件封装
  - 逻辑复用
  - 状态管理
  - 性能优化
```

## 功能实现

### 组合式函数
```yaml
函数设计:
  - 逻辑封装
  - 状态共享
  - 生命周期
  - 依赖注入

实现规范:
  - 命名规范
  - 参数类型
  - 返回值
  - 错误处理
```

### 状态管理
```yaml
状态设计:
  - 响应式状态
  - 计算状态
  - 共享状态
  - 持久化状态

状态模式:
  - Pinia集成
  - 组合式存储
  - 状态同步
  - 状态重置
```

## 性能优化

### 优化策略
```yaml
代码优化:
  - 懒加载
  - 按需加载
  - 缓存优化
  - 内存管理

渲染优化:
  - 虚拟列表
  - 组件缓存
  - 异步组件
  - 渲染控制
```

### 构建部署
```yaml
构建配置:
  - Vite配置
  - 打包优化
  - 代码分割
  - 资源优化

部署策略:
  - 静态部署
  - 动态部署
  - CDN加速
  - 缓存策略
```

## 测试规范

### 单元测试
```yaml
测试框架:
  - Vitest
  - Vue Test Utils
  - Jest
  - Testing Library

测试范围:
  - 组件测试
  - 组合式函数
  - 工具函数
  - 状态管理
```

### 集成测试
```yaml
测试类型:
  - 组件集成
  - 路由测试
  - 状态测试
  - E2E测试

测试工具:
  - Cypress
  - Playwright
  - Selenium
  - TestCafe
```

## 代码示例

### 基础组合式函数示例
```typescript
// useCounter.ts
import { ref, computed, watch } from 'vue'
import type { Ref } from 'vue'

interface UseCounterOptions {
  min?: number
  max?: number
  initial?: number
}

export function useCounter(options: UseCounterOptions = {}) {
  const {
    min = -Infinity,
    max = Infinity,
    initial = 0
  } = options

  const count: Ref<number> = ref(initial)
  const isMin = computed(() => count.value <= min)
  const isMax = computed(() => count.value >= max)

  const increment = () => {
    if (count.value < max) {
      count.value++
    }
  }

  const decrement = () => {
    if (count.value > min) {
      count.value--
    }
  }

  const reset = () => {
    count.value = initial
  }

  watch(count, (newValue) => {
    if (newValue > max) {
      count.value = max
    }
    if (newValue < min) {
      count.value = min
    }
  })

  return {
    count,
    isMin,
    isMax,
    increment,
    decrement,
    reset
  }
}
```

### 组件实现示例
```vue
<!-- Counter.vue -->
<script setup lang="ts">
import { useCounter } from '@/composables/useCounter'

interface Props {
  min?: number
  max?: number
  initial?: number
}

const props = withDefaults(defineProps<Props>(), {
  min: 0,
  max: 10,
  initial: 0
})

const { count, isMin, isMax, increment, decrement, reset } = useCounter({
  min: props.min,
  max: props.max,
  initial: props.initial
})

const emit = defineEmits<{
  (e: 'update:count', value: number): void
  (e: 'max-reached'): void
  (e: 'min-reached'): void
}>()

watch(count, (newValue) => {
  emit('update:count', newValue)
  if (isMax.value) emit('max-reached')
  if (isMin.value) emit('min-reached')
})
</script>

<template>
  <div class="counter">
    <button
      :disabled="isMin"
      @click="decrement"
      class="counter-button"
    >
      -
    </button>
    
    <span class="counter-value">{{ count }}</span>
    
    <button
      :disabled="isMax"
      @click="increment"
      class="counter-button"
    >
      +
    </button>
    
    <button
      @click="reset"
      class="counter-reset"
    >
      Reset
    </button>
  </div>
</template>

<style scoped>
.counter {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem;
}

.counter-button {
  padding: 0.5rem 1rem;
  font-size: 1.25rem;
  border: 1px solid #ccc;
  border-radius: 4px;
  background: #fff;
  cursor: pointer;
}

.counter-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.counter-value {
  font-size: 1.5rem;
  min-width: 3rem;
  text-align: center;
}

.counter-reset {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 4px;
  background: #f0f0f0;
  cursor: pointer;
}
</style>
```

### 状态管理示例
```typescript
// useStore.ts
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import type { Ref } from 'vue'

interface Todo {
  id: number
  title: string
  completed: boolean
}

export const useTodoStore = defineStore('todos', () => {
  const todos: Ref<Todo[]> = ref([])
  const filter: Ref<'all' | 'active' | 'completed'> = ref('all')

  const filteredTodos = computed(() => {
    switch (filter.value) {
      case 'active':
        return todos.value.filter(todo => !todo.completed)
      case 'completed':
        return todos.value.filter(todo => todo.completed)
      default:
        return todos.value
    }
  })

  const addTodo = (title: string) => {
    const todo: Todo = {
      id: Date.now(),
      title,
      completed: false
    }
    todos.value.push(todo)
  }

  const removeTodo = (id: number) => {
    const index = todos.value.findIndex(todo => todo.id === id)
    if (index !== -1) {
      todos.value.splice(index, 1)
    }
  }

  const toggleTodo = (id: number) => {
    const todo = todos.value.find(todo => todo.id === id)
    if (todo) {
      todo.completed = !todo.completed
    }
  }

  return {
    todos,
    filter,
    filteredTodos,
    addTodo,
    removeTodo,
    toggleTodo
  }
})
```

### 测试示例
```typescript
// useCounter.test.ts
import { describe, it, expect } from 'vitest'
import { useCounter } from './useCounter'
import { nextTick } from 'vue'

describe('useCounter', () => {
  it('should initialize with default values', () => {
    const { count, isMin, isMax } = useCounter()
    expect(count.value).toBe(0)
    expect(isMin.value).toBe(false)
    expect(isMax.value).toBe(false)
  })

  it('should respect min and max values', async () => {
    const { count, increment, decrement, isMin, isMax } = useCounter({
      min: 0,
      max: 2
    })

    expect(count.value).toBe(0)
    expect(isMin.value).toBe(true)
    expect(isMax.value).toBe(false)

    increment()
    await nextTick()
    expect(count.value).toBe(1)
    expect(isMin.value).toBe(false)
    expect(isMax.value).toBe(false)

    increment()
    await nextTick()
    expect(count.value).toBe(2)
    expect(isMin.value).toBe(false)
    expect(isMax.value).toBe(true)

    increment()
    await nextTick()
    expect(count.value).toBe(2) // Should not exceed max

    decrement()
    await nextTick()
    expect(count.value).toBe(1)
  })

  it('should reset to initial value', () => {
    const { count, increment, reset } = useCounter({
      initial: 5
    })

    expect(count.value).toBe(5)
    increment()
    expect(count.value).toBe(6)
    reset()
    expect(count.value).toBe(5)
  })
})
``` 